#include <iostream>

using namespace std;
class queuearray{
  private:
    int capacity,front,back;
    int *queue;
    void doublecapacity();
  public:
    queuearray(){
        capacity = 5;
        front = -1;
        back = -1;
        queue = new int[capacity];
    };
    void push(int);
    void pop();
    bool isempty();
    bool isfull();
    int getfront();
    int getback();
    int getsize();
    int getcapacity();
};
void queuearray::doublecapacity(){
    capacity = capacity*2;
    int *newqueue = new int[capacity];
    int j = -1;
    for(int i = front + 1;i <= back;i++){
        j++;
        newqueue[j] = queue[i];
    }
    front = -1;
    back = j;
    delete [] queue;
    queue = newqueue;
}
void queuearray::push(int x){
    if(isfull()){
        doublecapacity();
    }
    back = back + 1;
    queue[back] = x;
}
void queuearray::pop(){
    if(isempty()){
        cout<<"queue is empty!"<<endl;
        return;
    }
    front++;
}
bool queuearray::isfull(){
    return(back+1 == capacity);
}
bool queuearray::isempty(){
    return(back == front);
}
int queuearray::getfront(){
    if(isempty()){
        cout<<"queue is empty"<<endl;
        return -1;
    }
    return queue[front+1];
}
int queuearray::getback(){
    if(isempty()){
        cout<<"queue is empty"<<endl;
        return -1;
    }
    return queue[back];
}
int queuearray::getsize(){
    return (back - front);
}
int queuearray::getcapacity(){
    return capacity;
}
int main()
{
    queuearray q;
    if(q.isempty()){
        cout<<"queue is empty"<<endl;
    }
    q.push(24);
    q.push(78);
    q.push(34);
    cout<< q.getback()<<endl;
    q.pop();
    cout<<q.getfront()<<endl;
    return 0;
}
